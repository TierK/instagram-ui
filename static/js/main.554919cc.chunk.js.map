{"version":3,"sources":["Header/Header.js","Feed/Post/Post.js","Feed/Feed.js","Profile/Profile.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","src","style","width","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","Component","Post","icon","faUserAlt","this","props","faCalendarAlt","created","imgUrl","alt","title","children","faHeart","likes","Feed","state","posts","loaded","setState","fetch","then","res","json","unixDateConvert","unixDate","converter","Date","getDate","getMonth","getFullYear","faCoffee","size","spin","map","post","image","tags","tag","Profile","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mYAGqBA,E,iLAEb,OACA,yBAAKC,UAAU,iDACX,uBAAGA,UAAU,eAAeC,KAAK,KAAI,yBAAKC,IAAM,WAAWC,MAAO,CAACC,MAAO,WAC1E,4BAAQJ,UAAU,iBAAiBK,KAAK,SAASC,cAAY,WACrDC,cAAY,0BAA0BC,gBAAc,yBACpDC,gBAAc,QAAQC,aAAW,qBACrC,0BAAMV,UAAU,yBAGpB,yBAAKA,UAAU,2BAA2BW,GAAG,0BACzC,wBAAIX,UAAU,sBACV,wBAAIA,UAAU,mBACd,kBAAC,IAAD,CAAMA,UAAU,WAAWY,GAAG,KAA9B,QAAuC,0BAAMZ,UAAU,WAAhB,eAEvC,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,WAAWY,GAAG,YAA9B,mB,GAjBYC,a,8BCKfC,E,iLAEb,OACI,yBAAKd,UAAU,QACX,gCACI,iCAAO,kBAAC,IAAD,CAAiBe,KAAMC,MAA9B,IAA8CC,KAAKC,MAAMP,IACzD,iCAAO,kBAAC,IAAD,CAAiBI,KAAMI,MAA9B,IAAkDF,KAAKC,MAAME,UAEjE,yBAAKpB,UAAU,WAAU,yBAAKE,IAAKe,KAAKC,MAAMG,OAAQC,IAAI,cAC1D,yBAAKtB,UAAU,aAAaiB,KAAKC,MAAMK,OACvC,gCACI,6BAAMN,KAAKC,MAAMM,UACjB,yBAAKxB,UAAU,SAAQ,kBAAC,IAAD,CAAiBe,KAAMU,MAA9C,IAA2DR,KAAKC,MAAMQ,a,GAZxDb,aCDbc,E,YACjB,WAAYT,GAAQ,IAAD,8BACf,4CAAMA,KACDU,MAAQ,CACTC,MAAO,GACPC,QAAS,GAJE,E,iFAOE,IAAD,OAChBb,KAAKc,SAAS,CAACD,QAAQ,IACvBE,MAAM,6DACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAJ,GACF,EAAKE,SAAS,CAAEF,QAAOC,QAAQ,S,+BAIvC,SAASM,EAAgBC,GACrB,IAAMC,EAAY,IAAIC,KAAgB,IAAXF,GAG3B,MADQ,UAAMC,EAAUE,UAAhB,YADO,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACjDF,EAAUG,YAA9C,YAA6DH,EAAUI,eAInF,OAEI,yBAAK1C,UAAU,QACViB,KAAKW,MAAME,OACvB,yBAAK9B,UAAU,UACS,kBAAC,IAAD,CAAiBe,KAAO4B,IAAYC,KAAM,KAAKC,MAAI,KAE3E,KAEY5B,KAAKW,MAAMC,MAAMiB,KAAI,SAAAC,GAClB,OACI,kBAAC,EAAD,CACIpC,GAAIoC,EAAKpC,GACTS,QAASgB,EAAgBW,EAAK3B,SAC9BC,OAAQ0B,EAAKC,MACbzB,MAAOwB,EAAKxB,MACZG,MAAOqB,EAAKrB,OAEZ,yBAAK1B,UAAU,YAAY+C,EAAKE,KAAKH,KAAI,SAAAI,GACrC,OAAQ,iCAAOA,gB,GA3CbrC,aCJbsC,G,uLAEb,OACI,4C,GAHyBtC,c,QC8BtBuC,MApBf,WACE,OACE,kBAAC,IAAD,KACA,yBAAKpD,UAAU,gBACb,kBAAC,EAAD,MACA,8BACE,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOqD,KAAK,YACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,YCZUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.554919cc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Header.scss'; \r\nimport { Link } from 'react-router-dom';\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <a className=\"navbar-brand\" href=\"#\"><img src = \"logo.png\" style={{width: '60px'}}/></a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\r\n                    data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\r\n                    aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item active\">\r\n                    <Link className=\"nav-link\" to=\"/\">Home <span className=\"sr-only\">(current)</span></Link>\r\n                   </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/profile\">Profile</Link> \r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './Post.scss';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCalendarAlt, faUserAlt, faHeart } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n\r\n\r\nexport default class Post extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Post\">\r\n                <header>\r\n                    <div> {<FontAwesomeIcon icon={faUserAlt} />} {this.props.id}</div>\r\n                    <div> {<FontAwesomeIcon icon={faCalendarAlt} />} {this.props.created}</div>\r\n                </header>\r\n                <div className=\"userImg\"><img src={this.props.imgUrl} alt=\"userLogo\" /></div>\r\n                <div className=\"userTitle\">{this.props.title}</div>\r\n                <footer>\r\n                    <div>{this.props.children}</div>\r\n                    <div className=\"likes\"><FontAwesomeIcon icon={faHeart} /> {this.props.likes}</div>\r\n                </footer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './Feed.scss'\r\nimport Post from './Post/Post';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCoffee } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nexport default class Feed extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            posts: [],\r\n            loaded : false\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.setState({loaded: true});\r\n        fetch(\"https://my-json-server.typicode.com/evyros/fake-api/posts\")\r\n            .then(res => res.json())\r\n            .then(posts => {\r\n                this.setState({ posts, loaded: false});\r\n            });\r\n    }\r\n    render() {\r\n        function unixDateConvert(unixDate) {\r\n            const converter = new Date(unixDate * 1000);\r\n            const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n            let date = `${converter.getDate()} ${months[converter.getMonth()]} ${converter.getFullYear()}`;\r\n            return date;\r\n        }\r\n\r\n        return (\r\n\r\n            <div className=\"Feed\">\r\n                {this.state.loaded ?\r\n\t\t\t\t\t<div className=\"Loader\">\r\n                            {<FontAwesomeIcon icon={ faCoffee  } size =\"6x\" spin />}\r\n\t\t\t\t\t</div> :\r\n\t\t\t\t\tnull\r\n\t\t\t\t}\r\n                {this.state.posts.map(post => {\r\n                    return (\r\n                        <Post\r\n                            id={post.id}\r\n                            created={unixDateConvert(post.created)}\r\n                            imgUrl={post.image}\r\n                            title={post.title}\r\n                            likes={post.likes}\r\n                        >\r\n                            <div className=\"postTags\">{post.tags.map(tag=>{\r\n                                return (<div>#{tag}</div>);\r\n                            })}</div>\r\n                        </Post>\r\n                    );  \r\n                })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './Profile.scss';\r\n\r\nexport default class Profile extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Profile\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport Header from './Header/Header';\nimport Feed from './Feed/Feed';\nimport Profile from './Profile/Profile';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App bg-light\">\n      <Header/>\n      <main>\n        <Switch>\n        <Route path=\"/profile\">\n          <Profile/>\n          </Route>\n        <Route path=\"/\">\n          <Feed/>\n          </Route>\n        </Switch>\n      </main>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}